#!/usr/bin/env python3

import os

HEADER_TEMPLATE = """// This file is auto-generated by gen_header.py
#ifndef AoC_modules_H
#define AoC_modules_H

#include <map>
#include <string>
#include <vector>
#include "AoC.h"

{{functions}}

using ModuleFuncPtr = AoC* (*)(bool);

namespace AoCModules {
	std::map<std::string,ModuleFuncPtr> modules = {
		{{modules}}
	};
    std::vector<std::string> modules_order = {
		{{module_names}}
    };
};

#endif
"""

def gen_header(silent=False):
    days = []
    for f in sorted(os.listdir(),key=lambda x: int(x.replace("day","").replace(".cpp","")) if x.startswith("day") else 999):
        if f.startswith("day") and f.endswith(".cpp"):
            days.append(f[3:f.find(".")])

    functions = "\n".join(f"AoC *day{n}_create(bool test);" for n in days)
    modules = ",\n\t\t".join(f'{{"day{n}", day{n}_create}}' for n in days)
    module_names = ",\n\t\t".join(f'"day{n}"' for n in days)
    output = HEADER_TEMPLATE
    output = output.replace("{{functions}}",functions)
    output = output.replace("{{modules}}",modules)
    output = output.replace("{{module_names}}",module_names)
    if not silent:
        print(output)
    with open("AoC_modules.h",'w') as fp:
        fp.write(output)

def _main():
    gen_header()

if __name__ == "__main__":
    _main()
